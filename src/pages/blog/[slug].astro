---
export const prerender = true;
import Layout from "@layouts/Layout.astro";
import Comments from "@organisms/Comments/Comments.astro";
import { replaceIframes } from "@src/utils/index";
import Loader from "@src/components/atoms/Loader/Loader.astro";
import { isLoggedIn } from "@src/services/auth";
import CommentForm from "@src/components/molecules/CommentForm/CommentForm.astro";
const { cookies } = Astro;
const isLogged = isLoggedIn(cookies);
import { wpquery } from "@src/data/wordpress";
const { slug } = Astro.params;

/* import { getPostsBySlug } from "@src/services/getPostsBySlug";
const post = await getPostsBySlug(slug);

if (!post) {
  return Astro.redirect("/404");
  } */

import { PostContentData } from "@src/services/getPostContent";
export async function getStaticPaths() {
  const data = PostContentData;

  return PostContentData.posts.nodes.map((post: any) => {
    if (!post.slug) {
      throw new Error("Post slug is undefined");
    }

    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
}

interface AstroProps {
  post: {
    featuredImage?: {
      node?: {
        mediaItemUrl?: string;
        srcSet?: string;
        sizes?: string;
        altText?: string;
      };
    };
    title: string;
    author?: {
      node?: {
        firstName?: string;
        lastName?: string;
        name?: string;
        avatar?: { url?: string };
      };
    };
    seo: { metaDesc?: string; readingTime?: number };
    date: string;
    modified: string;
    tags: { nodes: { name: string }[] };
    content: string;
    categories: { nodes: { name: string }[] };
    id: string;
  };
  date: string;
}

const { post } = Astro.props as AstroProps;

const postImage =
  post?.featuredImage?.node?.mediaItemUrl || "/img/branding/logo.png";

const { date } = Astro.props;
const formatDate = new Date(date);
const day = formatDate.getDate();
const before_month = formatDate
  .toLocaleString("default", { month: "long" })
  .slice(0, 3);
const month = before_month.charAt(0).toUpperCase() + before_month.slice(1);
const year = formatDate.getFullYear();

const newDateFormat = `${day} / ${month} / ${year}`;
const author = post.author?.node;
const keyWords = post.tags.nodes.map((keyword) => keyword.name).join(", ");

const postID = atob(post.id).split(":")[1];
---

<Layout image={postImage} title={post.title} description={post.seo.metaDesc}>
  <meta
    slot="head"
    name="author"
    content=`${author.firstName} ${author.lastName}, ${post.author.node.name} `
  />
  <meta slot="head" property="article:published_time" content={post.date} />
  <meta slot="head" property="article:modified_time" content={post.modified} />
  <meta slot="head" name="keywords" content={keyWords} />
  <!-- end of HEAD tags -->

  <section
    id="post"
    class="flex items-center justify-center w-full pt-36 pb-20 px-10"
  >
    <article
      class="flex flex-col w-full max-w-[900px]"
      transition:name=`${post.title}-${post.categories.nodes[0].name}`
      transition:name=`styckyPost-${post.title}`
    >
      <div class="w-full max-w-[1300px] mx-auto overflow-hidden">
        <img
          srcset={post.featuredImage?.node?.srcSet}
          sizes={post.featuredImage?.node?.sizes}
          class="w-full h-full object-cover"
          src={post?.featuredImage?.node?.mediaItemUrl ||
            "/img/branding/logo.png"}
          alt={post?.featuredImage?.node?.altText || post.title}
        />
      </div>
      <h1
        class="font-bold text-[2.5rem] md:text-[4rem] my-10 text-center text-pretty"
      >
        {post.title}
      </h1>
      <!-- Author Info -->
      <div class="flex gap-3 items-center my-5 px-3 group">
        <img
          class="w-24 h-24 group-hover:scale-110 rounded-full"
          src={author.avatar?.url}
          alt={author.name}
        />
        <div class="flex flex-col items-center gap-5">
          <p class="text-2xl font-bold">
            {author.firstName}
            {author.lastName}
          </p>
          <p class="font-bold text-2xl">
            Tiempo de lectura
            <span class="text-violet-700"> {post.seo.readingTime} minutes</span>
          </p>
        </div>
      </div>
      <div
        class="w-full md:max-w-[800px] flex flex-col items-start gap-10 justify-center self-center text-left"
      >
        <Fragment set:html={replaceIframes(post.content) || ""} />
        <Comments slug={slug} server:defer>
          <div slot="fallback">
            <Loader />
          </div>
          <CommentForm postId={postID} {isLogged} server:defer />
        </Comments>
      </div>
    </article>
  </section>
  <div class="progress"></div>
</Layout>
<script>
  import { fastYoutube } from "@src/utils/fast-youtube";
  import { InsertButtonCopy } from "@pages/blog/button-copy";
  document.addEventListener("astro:page-load", () => {
    InsertButtonCopy();
  });
</script>

<style lang="scss" is:global>
  @use "@sass/variables" as v;

  main {
    margin-top: 0;
  }
  .progress {
    height: 0.2rem;
    width: 100%;
    background: v.$french-violet;
    position: fixed;
    top: 0;
    left: 0;
    transform-origin: 0 50%;
    animation: progressStatus auto linear;
    animation-timeline: scroll(root);
  }
  .dark {
    .progress {
      background: v.$ufo-green;
    }
  }

  @keyframes progressStatus {
    0% {
      transform: scaleX(0);
    }
    100% {
      transform: scaleX(1);
    }
  }
</style>
