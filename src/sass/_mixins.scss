
@use '@sass/variables' as v;


// Reset padding and margin
@mixin reset-pm {
  padding: 0;
  margin: 0;
}

// Center flexbox
@mixin centerFlex($justify: center, $align: center) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
}

// Font family mixin
@mixin font-family($type) {
  @if $type == "montserrat" {
    font-family: "Montserrat Variable", sans-serif;
  } @else if $type == "fira-code" {
    font-family: "fira-code", sans-serif;
  } @else if $type == "textos" {
    font-family: 'Questrial', sans-serif;
  }
}

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == "small" {
    @media (max-width: 320px) {
      @content;
    }
  } @else if $breakpoint == "medium" {
    @media (max-width: 768px) {
      @content;
    }
  } @else if $breakpoint == "large" {
    @media (max-width: 1024px) {
      @content;
    }
  }
}

// Text gradient mixin
@mixin text-gradient($mode) {
  @if $mode == "light" {
    background: v.$text-over-light;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  } @else if $mode == "dark" {
    background: v.$text-over-dark;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
}

// Theme-based styling
@mixin isTheme($type) {
  @if $type == "light" {
    background: v.$secondaryColor;
    color: v.$mainColor;
  } @else if $type == "dark" {
    background: v.$bgDark;
    color: v.$secondaryColor;
  }
}
