---
const { currentPage, totalPages, baseUrl, query = null } = Astro.props;
const currentPageUrl = new URLSearchParams(query || "");
currentPageUrl.set("page", (currentPage - 1).toString());
const nextPageUrl = new URLSearchParams(query || "");
nextPageUrl.set("page", (currentPage + 1).toString());
---

<section class="pagination">
  <div class="pagination__container">
    <a
      aria-label="Ir a la página anterior"
      data-astro-prefetch="hover"
      href={`${baseUrl}?${currentPageUrl}`}
      class:list={[
        "pagination__link pagination__link--disabled",
        currentPage > 1 && "pagination__link--active",
      ]}>Anterior</a
    >
    {
      Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => {
        const queryString = new URLSearchParams(query || "");
        queryString.set("page", page.toString());
        return (
          <a
          aria-label={`Ir a la página ${page}`}
            data-astro-prefetch="hover"
            href={`${baseUrl}?${queryString}`}
            class:list={[
              "pagination__link",
              page === currentPage ? "pagination__link--current" : "",
            ]}
          >
            {page}
          </a>
        );
      })
    }
    <a
    aria-label="Ir a la página siguiente"
      data-astro-prefetch="hover"
      href={`${baseUrl}?${nextPageUrl}`}
      class:list={[
        "pagination__link pagination__link--disabled",
        currentPage < totalPages && "pagination__link--active",
      ]}>Siguiente</a
    >
  </div>
</section>

<style lang="scss" define:vars={{ baseUrl }}>
  @use "@sass/variables" as v;
  @use "@sass/mixins" as  *;
  .pagination {
    @include centerFlex(center);
    margin-top: auto;
    &__container {
      display: flex;
      justify-content: center;
      gap: 10px;
      align-self: center;
      margin:  auto;
      justify-self: center;
    }
    &__link {
      padding: 5px 10px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      text-decoration: none;
      color: white;
      background-color: v.$french-violet;
      &--disabled {
        pointer-events: none;
        background-color: rgba(102, 102, 102, 0.637);
      }
      &--active {
        background-color: v.$french-violet;
        color: white;
        pointer-events: initial;
      }
      &--current {
        background-color: #300068;
        color: v.$ufo-green;
        pointer-events: initial;
      }
    }
  }
</style>
