---
const { postId = null, isLogged = false  } = Astro.props;
const hidden = isLogged;
---


<form method="POST" id="comment-form" class="comment-form">
  {
    isLogged && (
      <h3 class="comment-form__title">Conectado como <span class="comment-form__title-username">{ isLogged.name }</span>. Deja un comentario</h3>
    )
  }
  <input type="hidden" name="postId" value={postId} />
  <input type="hidden" name="parentId" value="" />
  <div class={`comment-form__field ${hidden ? 'comment-form__field--hidden' : ''}`}>
    <label for="author" class="comment-form__label">Nombre</label>
    <input
      id="author"
      name="author"
      type="text"
      class="comment-form__input"
    />
  </div>
  <div class={`comment-form__field ${hidden ? 'comment-form__field--hidden' : ''}`}>
    <label for="authorEmail" class="comment-form__label">Correo electr√≥nico</label>
    <input
      id="authorEmail"
      name="authorEmail"
      type="email"
      class="comment-form__input"
    />
  </div>
  <div class={`comment-form__field ${hidden ? 'comment-form__field--hidden' : ''}`}>
    <label   for="authorUrl" class="comment-form__label">Sitio web (opcional)</label>
    <input
      id="authorUrl"
      name="authorUrl"
      type="url"
      class="comment-form__input"
    />
  </div>
  <div class="comment-form__field">
    <label for="content" class="comment-form__label">Comentario</label>
    <textarea
      id="content"
      name="content"
      required
      class="comment-form__textarea"
    ></textarea>
  </div>
  <button
    type="submit"
    id="add-comment"
    class="comment-form__submit-btn"
  >
    Publicar Comentario
  </button>
  <p id="success-message" class="comment-form__message comment-form__message--success comment-form__message--hidden">Comentario publicado exitosamente.</p>
  <p id="error-message" class="comment-form__message comment-form__message--error comment-form__message--hidden">Hubo un problema al publicar tu comentario.</p>
</form>

<script is:inline>

  const comments = document.getElementById("comments");

  comments.addEventListener("click", (event) => {
    if (event.target.classList.contains("reply")) {
      let commentId = event.target.getAttribute("data-commentId");
      const form = document.getElementById("comment-form");
      form.querySelector("input[name='parentId']").value = commentId;
    }
  })
  const form = document.getElementById("comment-form");
  const successMessage = document.getElementById("success-message");
  const errorMessage = document.getElementById("error-message");
  const addCommentBtn = form.querySelector("#add-comment");

  addCommentBtn.addEventListener("click", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    try {
      const commentData = await addComment(formData);
      insertComment(commentData.data);

    } catch (error) {
      successMessage.classList.add("comment-form__message--hidden");
      errorMessage.classList.remove("comment-form__message--hidden");
    }
  });

  function insertComment(comment) {

    const firstComment = document.querySelector(".comment");
    const comments = document.querySelector("#comments");
    const clone = document.querySelector(".comment").cloneNode(true);

    clone.querySelector(".comment__author").innerText = comment.author;
    clone.querySelector(".comment__content").innerHTML = comment.content;
    const fecha = new Date();

    const formatt = fecha.toLocaleDateString('es-ES', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    clone.querySelector(".comment__date").innerText = formatt;

    comments.insertBefore(clone, firstComment);
    console.log("comment added")
}


  async function addComment(formData) {
    try {
        const res = await fetch(`/api/comments/replies`,{
            method: 'POST',
            body:formData
        })
        const data = await res.json();
        return data;

    } catch (error) {
        console.error(error)
    }

}
</script>